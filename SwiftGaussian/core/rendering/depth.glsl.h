#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i ./ios-splats/ios-splats/core/rendering/depth.glsl -o ./ios-splats/ios-splats/core/rendering/depth.glsl.h -l metal_ios:metal_sim:metal_macos:hlsl5:glsl310es:glsl410

    Overview:
    =========
    Shader program: 'depth':
        Get shader desc: depth_shader_desc(sg_query_backend());
        Compute Shader: depth_calc
    Bindings:
        Uniform block 'depth_params':
            C struct: depth_params_t
            Bind slot: UB_depth_params => 0
        Storage buffer 'depth_output':
            C struct: DepthValue_t
            Bind slot: VIEW_depth_output => 3
            Readonly: false
        Storage buffer 'index_output':
            C struct: DepthIndexData_t
            Bind slot: VIEW_index_output => 4
            Readonly: false
        Texture 'splat_texture':
            Image type: SG_IMAGETYPE_ARRAY
            Sample type: SG_IMAGESAMPLETYPE_UINT
            Multisampled: false
            Bind slot: VIEW_splat_texture => 1
        Sampler 'splat_sampler':
            Type: SG_SAMPLERTYPE_NONFILTERING
            Bind slot: SMP_splat_sampler => 2
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before depth.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define UB_depth_params (0)
#define VIEW_depth_output (3)
#define VIEW_index_output (4)
#define VIEW_splat_texture (1)
#define SMP_splat_sampler (2)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct depth_params_t {
    float viewMat_row0[4];
    float viewMat_row1[4];
    float viewMat_row2[4];
    float viewMat_row3[4];
    float camera_position[3];
    float _pad0;
    float camera_forward[3];
    float _pad1;
    float bounds_min[3];
    float _pad2;
    float bounds_size[3];
    int splat_count;
    int texture_width;
    int texture_height;
    int splats_per_layer;
    float _pad3;
} depth_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(4) typedef struct DepthValue_t {
    float value;
} DepthValue_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(4) typedef struct DepthIndexData_t {
    uint32_t value;
} DepthIndexData_t;
#pragma pack(pop)
/*
    #version 410
    #extension GL_ARB_compute_shader : require
    layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

    struct DepthValue
    {
        float value;
    };

    struct DepthIndexData
    {
        uint value;
    };

    struct depth_params
    {
        vec4 viewMat_row0;
        vec4 viewMat_row1;
        vec4 viewMat_row2;
        vec4 viewMat_row3;
        vec3 camera_position;
        float _pad0;
        vec3 camera_forward;
        float _pad1;
        vec3 bounds_min;
        float _pad2;
        vec3 bounds_size;
        int splat_count;
        int texture_width;
        int texture_height;
        int splats_per_layer;
        float _pad3;
    };

    uniform depth_params _22;

    layout(std430) writeonly buffer depth_output
    {
        DepthValue depths[];
    } _141;

    layout(std430) buffer index_output
    {
        DepthIndexData indices[];
    } _150;

    uniform usampler2DArray splat_texture_splat_sampler;

    vec3 unpack_position(uint splat_idx)
    {
        int _27 = int(splat_idx) / _22.splats_per_layer;
        int _35 = int(splat_idx) - (_27 * _22.splats_per_layer);
        uvec4 _67 = texelFetch(splat_texture_splat_sampler, ivec3(_35 % _22.texture_width, _35 / _22.texture_width, _27), 0);
        uint _72 = _67.x;
        return _22.bounds_min + ((vec3(float((_72 >> 16u) & 65535u), float(_72 & 65535u), float((_67.y >> 16u) & 65535u)) * 1.525902189314365386962890625e-05) * _22.bounds_size);
    }

    void main()
    {
        if (int(gl_GlobalInvocationID.x) >= _22.splat_count)
        {
            return;
        }
        uint param = gl_GlobalInvocationID.x;
        _141.depths[gl_GlobalInvocationID.x].value = dot(unpack_position(param) - _22.camera_position, _22.camera_forward);
        _150.indices[gl_GlobalInvocationID.x].value = gl_GlobalInvocationID.x;
    }

*/
static const uint8_t depth_calc_source_glsl410[1636] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x23,0x65,0x78,
    0x74,0x65,0x6e,0x73,0x69,0x6f,0x6e,0x20,0x47,0x4c,0x5f,0x41,0x52,0x42,0x5f,0x63,
    0x6f,0x6d,0x70,0x75,0x74,0x65,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x20,0x3a,0x20,
    0x72,0x65,0x71,0x75,0x69,0x72,0x65,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x6c,0x5f,0x73,0x69,0x7a,0x65,0x5f,0x78,0x20,0x3d,0x20,0x32,0x35,
    0x36,0x2c,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x73,0x69,0x7a,0x65,0x5f,0x79,0x20,
    0x3d,0x20,0x31,0x2c,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x73,0x69,0x7a,0x65,0x5f,
    0x7a,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,
    0x68,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,
    0x6f,0x77,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,
    0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,
    0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x61,0x6d,0x65,
    0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,
    0x72,0x77,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x70,0x61,0x64,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x6d,0x69,0x6e,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x32,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,
    0x7a,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,
    0x74,0x5f,0x63,0x6f,0x75,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x68,0x65,0x69,0x67,0x68,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x73,0x70,0x6c,0x61,0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,
    0x33,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x64,
    0x65,0x70,0x74,0x68,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x5f,0x32,0x32,0x3b,
    0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x73,0x74,0x64,0x34,0x33,0x30,0x29,
    0x20,0x77,0x72,0x69,0x74,0x65,0x6f,0x6e,0x6c,0x79,0x20,0x62,0x75,0x66,0x66,0x65,
    0x72,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,0x65,0x20,
    0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5d,0x3b,0x0a,0x7d,0x20,0x5f,0x31,0x34,0x31,
    0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x73,0x74,0x64,0x34,0x33,0x30,
    0x29,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x69,0x6e,0x64,0x65,0x78,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x44,0x65,0x70,0x74,
    0x68,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x20,0x69,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x5b,0x5d,0x3b,0x0a,0x7d,0x20,0x5f,0x31,0x35,0x30,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,
    0x44,0x41,0x72,0x72,0x61,0x79,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x75,0x69,0x6e,0x74,0x20,0x73,
    0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x70,
    0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,0x32,0x2e,0x73,
    0x70,0x6c,0x61,0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x35,0x20,0x3d,0x20,0x69,
    0x6e,0x74,0x28,0x73,0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2d,0x20,
    0x28,0x5f,0x32,0x37,0x20,0x2a,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,
    0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x76,0x65,0x63,0x34,0x20,0x5f,0x36,0x37,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x2c,0x20,0x69,0x76,0x65,0x63,0x33,0x28,0x5f,0x33,0x35,0x20,
    0x25,0x20,0x5f,0x32,0x32,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x77,0x69,
    0x64,0x74,0x68,0x2c,0x20,0x5f,0x33,0x35,0x20,0x2f,0x20,0x5f,0x32,0x32,0x2e,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x2c,0x20,0x5f,0x32,
    0x37,0x29,0x2c,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x5f,0x37,0x32,0x20,0x3d,0x20,0x5f,0x36,0x37,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x5f,0x32,0x32,0x2e,0x62,0x6f,0x75,
    0x6e,0x64,0x73,0x5f,0x6d,0x69,0x6e,0x20,0x2b,0x20,0x28,0x28,0x76,0x65,0x63,0x33,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x5f,0x37,0x32,0x20,0x3e,0x3e,0x20,0x31,
    0x36,0x75,0x29,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x28,0x5f,0x37,0x32,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,
    0x75,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x5f,0x36,0x37,0x2e,0x79,
    0x20,0x3e,0x3e,0x20,0x31,0x36,0x75,0x29,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,
    0x75,0x29,0x29,0x20,0x2a,0x20,0x31,0x2e,0x35,0x32,0x35,0x39,0x30,0x32,0x31,0x38,
    0x39,0x33,0x31,0x34,0x33,0x36,0x35,0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,
    0x36,0x32,0x35,0x65,0x2d,0x30,0x35,0x29,0x20,0x2a,0x20,0x5f,0x32,0x32,0x2e,0x62,
    0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x69,0x6e,0x74,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,
    0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,
    0x78,0x29,0x20,0x3e,0x3d,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,0x5f,
    0x63,0x6f,0x75,0x6e,0x74,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x5f,0x31,0x34,0x31,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x67,0x6c,0x5f,
    0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x49,0x44,0x2e,0x78,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x64,0x6f,
    0x74,0x28,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x20,0x2d,0x20,0x5f,0x32,0x32,0x2e,0x63,
    0x61,0x6d,0x65,0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,
    0x5f,0x32,0x32,0x2e,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,
    0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x30,0x2e,0x69,0x6e,
    0x64,0x69,0x63,0x65,0x73,0x5b,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,
    0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x5d,0x2e,0x76,
    0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,
    0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 310 es
    layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

    struct DepthValue
    {
        float value;
    };

    struct DepthIndexData
    {
        uint value;
    };

    struct depth_params
    {
        vec4 viewMat_row0;
        vec4 viewMat_row1;
        vec4 viewMat_row2;
        vec4 viewMat_row3;
        vec3 camera_position;
        float _pad0;
        vec3 camera_forward;
        float _pad1;
        vec3 bounds_min;
        float _pad2;
        vec3 bounds_size;
        int splat_count;
        int texture_width;
        int texture_height;
        int splats_per_layer;
        float _pad3;
    };

    uniform depth_params _22;

    layout(binding = 3, std430) writeonly buffer depth_output
    {
        DepthValue depths[];
    } _141;

    layout(binding = 4, std430) buffer index_output
    {
        DepthIndexData indices[];
    } _150;

    layout(binding = 0) uniform highp usampler2DArray splat_texture_splat_sampler;

    vec3 unpack_position(uint splat_idx)
    {
        int _27 = int(splat_idx) / _22.splats_per_layer;
        int _35 = int(splat_idx) - (_27 * _22.splats_per_layer);
        uvec4 _67 = texelFetch(splat_texture_splat_sampler, ivec3(_35 % _22.texture_width, _35 / _22.texture_width, _27), 0);
        uint _72 = _67.x;
        return _22.bounds_min + ((vec3(float((_72 >> 16u) & 65535u), float(_72 & 65535u), float((_67.y >> 16u) & 65535u)) * 1.525902189314365386962890625e-05) * _22.bounds_size);
    }

    void main()
    {
        if (int(gl_GlobalInvocationID.x) >= _22.splat_count)
        {
            return;
        }
        uint param = gl_GlobalInvocationID.x;
        _141.depths[gl_GlobalInvocationID.x].value = dot(unpack_position(param) - _22.camera_position, _22.camera_forward);
        _150.indices[gl_GlobalInvocationID.x].value = gl_GlobalInvocationID.x;
    }

*/
static const uint8_t depth_calc_source_glsl310es[1648] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x31,0x30,0x20,0x65,0x73,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x73,0x69,0x7a,
    0x65,0x5f,0x78,0x20,0x3d,0x20,0x32,0x35,0x36,0x2c,0x20,0x6c,0x6f,0x63,0x61,0x6c,
    0x5f,0x73,0x69,0x7a,0x65,0x5f,0x79,0x20,0x3d,0x20,0x31,0x2c,0x20,0x6c,0x6f,0x63,
    0x61,0x6c,0x5f,0x73,0x69,0x7a,0x65,0x5f,0x7a,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,
    0x56,0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,
    0x74,0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x76,0x61,
    0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x64,0x65,0x70,0x74,0x68,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,
    0x72,0x6f,0x77,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x76,
    0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x31,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,
    0x77,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,0x65,
    0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x70,0x61,0x64,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x63,
    0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,
    0x6d,0x69,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x70,0x61,0x64,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x62,
    0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x63,0x6f,0x75,0x6e,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x77,0x69,0x64,0x74,0x68,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x68,0x65,0x69,0x67,0x68,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,0x74,0x73,0x5f,0x70,
    0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x33,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x20,0x5f,0x32,0x32,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x33,0x2c,0x20,0x73,0x74,
    0x64,0x34,0x33,0x30,0x29,0x20,0x77,0x72,0x69,0x74,0x65,0x6f,0x6e,0x6c,0x79,0x20,
    0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6f,0x75,0x74,
    0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x44,0x65,0x70,0x74,0x68,0x56,
    0x61,0x6c,0x75,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5d,0x3b,0x0a,0x7d,
    0x20,0x5f,0x31,0x34,0x31,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x62,
    0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x34,0x2c,0x20,0x73,0x74,0x64,0x34,
    0x33,0x30,0x29,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x69,0x6e,0x64,0x65,0x78,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x44,0x65,
    0x70,0x74,0x68,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x20,0x69,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x5b,0x5d,0x3b,0x0a,0x7d,0x20,0x5f,0x31,0x35,0x30,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x75,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,
    0x61,0x79,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,
    0x0a,0x76,0x65,0x63,0x33,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x28,0x75,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,0x74,
    0x5f,0x69,0x64,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x5f,0x32,0x37,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x70,0x6c,0x61,0x74,0x5f,
    0x69,0x64,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,
    0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x35,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,
    0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2d,0x20,0x28,0x5f,0x32,0x37,
    0x20,0x2a,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,0x73,0x5f,0x70,0x65,
    0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x36,0x37,0x20,0x3d,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,
    0x65,0x74,0x63,0x68,0x28,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x2c,0x20,0x69,0x76,0x65,0x63,0x33,0x28,0x5f,0x33,0x35,0x20,0x25,0x20,0x5f,0x32,
    0x32,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x2c,
    0x20,0x5f,0x33,0x35,0x20,0x2f,0x20,0x5f,0x32,0x32,0x2e,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x2c,0x20,0x5f,0x32,0x37,0x29,0x2c,0x20,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x37,0x32,
    0x20,0x3d,0x20,0x5f,0x36,0x37,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x5f,0x32,0x32,0x2e,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,
    0x6d,0x69,0x6e,0x20,0x2b,0x20,0x28,0x28,0x76,0x65,0x63,0x33,0x28,0x66,0x6c,0x6f,
    0x61,0x74,0x28,0x28,0x5f,0x37,0x32,0x20,0x3e,0x3e,0x20,0x31,0x36,0x75,0x29,0x20,
    0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x28,0x5f,0x37,0x32,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x5f,0x36,0x37,0x2e,0x79,0x20,0x3e,0x3e,0x20,
    0x31,0x36,0x75,0x29,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x29,0x20,
    0x2a,0x20,0x31,0x2e,0x35,0x32,0x35,0x39,0x30,0x32,0x31,0x38,0x39,0x33,0x31,0x34,
    0x33,0x36,0x35,0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,0x36,0x32,0x35,0x65,
    0x2d,0x30,0x35,0x29,0x20,0x2a,0x20,0x5f,0x32,0x32,0x2e,0x62,0x6f,0x75,0x6e,0x64,
    0x73,0x5f,0x73,0x69,0x7a,0x65,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x69,0x6e,0x74,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,
    0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x29,0x20,0x3e,
    0x3d,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,0x5f,0x63,0x6f,0x75,0x6e,
    0x74,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,
    0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x34,
    0x31,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,
    0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,
    0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x75,0x6e,
    0x70,0x61,0x63,0x6b,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x29,0x20,0x2d,0x20,0x5f,0x32,0x32,0x2e,0x63,0x61,0x6d,0x65,0x72,
    0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x5f,0x32,0x32,0x2e,
    0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,
    0x73,0x5b,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,
    0x20,0x3d,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
/*
    struct DepthValue
    {
        float value;
    };

    struct DepthIndexData
    {
        uint value;
    };

    static const uint3 gl_WorkGroupSize = uint3(256u, 1u, 1u);

    cbuffer depth_params : register(b0)
    {
        float4 _22_viewMat_row0 : packoffset(c0);
        float4 _22_viewMat_row1 : packoffset(c1);
        float4 _22_viewMat_row2 : packoffset(c2);
        float4 _22_viewMat_row3 : packoffset(c3);
        float3 _22_camera_position : packoffset(c4);
        float _22_pad0 : packoffset(c4.w);
        float3 _22_camera_forward : packoffset(c5);
        float _22_pad1 : packoffset(c5.w);
        float3 _22_bounds_min : packoffset(c6);
        float _22_pad2 : packoffset(c6.w);
        float3 _22_bounds_size : packoffset(c7);
        int _22_splat_count : packoffset(c7.w);
        int _22_texture_width : packoffset(c8);
        int _22_texture_height : packoffset(c8.y);
        int _22_splats_per_layer : packoffset(c8.z);
        float _22_pad3 : packoffset(c8.w);
    };

    RWByteAddressBuffer _141 : register(u0);
    RWByteAddressBuffer _150 : register(u1);
    Texture2DArray<uint4> splat_texture : register(t0);
    SamplerState splat_sampler : register(s2);

    static uint3 gl_GlobalInvocationID;
    struct SPIRV_Cross_Input
    {
        uint3 gl_GlobalInvocationID : SV_DispatchThreadID;
    };

    float3 unpack_position(uint splat_idx)
    {
        int _27 = int(splat_idx) / _22_splats_per_layer;
        int _35 = int(splat_idx) - (_27 * _22_splats_per_layer);
        uint4 _67 = splat_texture.Load(int4(int3(_35 % _22_texture_width, _35 / _22_texture_width, _27), 0));
        uint _72 = _67.x;
        return _22_bounds_min + ((float3(float((_72 >> 16u) & 65535u), float(_72 & 65535u), float((_67.y >> 16u) & 65535u)) * 1.525902189314365386962890625e-05f) * _22_bounds_size);
    }

    void comp_main()
    {
        if (int(gl_GlobalInvocationID.x) >= _22_splat_count)
        {
            return;
        }
        uint param = gl_GlobalInvocationID.x;
        _141.Store(gl_GlobalInvocationID.x * 4 + 0, asuint(dot(unpack_position(param) - _22_camera_position, _22_camera_forward)));
        _150.Store(gl_GlobalInvocationID.x * 4 + 0, gl_GlobalInvocationID.x);
    }

    [numthreads(256, 1, 1)]
    void main(SPIRV_Cross_Input stage_input)
    {
        gl_GlobalInvocationID = stage_input.gl_GlobalInvocationID;
        comp_main();
    }
*/
static const uint8_t depth_calc_source_hlsl5[2162] = {
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,
    0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x61,
    0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x44,0x65,0x70,0x74,0x68,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x20,0x75,0x69,0x6e,0x74,0x33,0x20,0x67,0x6c,0x5f,0x57,0x6f,0x72,0x6b,0x47,
    0x72,0x6f,0x75,0x70,0x53,0x69,0x7a,0x65,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x33,
    0x28,0x32,0x35,0x36,0x75,0x2c,0x20,0x31,0x75,0x2c,0x20,0x31,0x75,0x29,0x3b,0x0a,
    0x0a,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,
    0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x5f,0x32,0x32,0x5f,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,
    0x77,0x30,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x5f,0x32,0x32,0x5f,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x31,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,
    0x32,0x5f,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x32,0x20,0x3a,
    0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x32,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x32,0x5f,
    0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x33,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x33,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x32,0x32,0x5f,0x63,0x61,
    0x6d,0x65,0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,
    0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x34,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x5f,0x70,0x61,
    0x64,0x30,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x34,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x5f,0x32,0x32,0x5f,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,
    0x77,0x61,0x72,0x64,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,
    0x74,0x28,0x63,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x32,0x32,0x5f,0x70,0x61,0x64,0x31,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x35,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x32,0x32,0x5f,0x62,0x6f,0x75,
    0x6e,0x64,0x73,0x5f,0x6d,0x69,0x6e,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x36,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x32,0x32,0x5f,0x70,0x61,0x64,0x32,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x36,0x2e,0x77,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x32,0x32,0x5f,
    0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3a,0x20,0x70,0x61,
    0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x37,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x32,0x5f,0x73,0x70,0x6c,0x61,0x74,0x5f,
    0x63,0x6f,0x75,0x6e,0x74,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,
    0x65,0x74,0x28,0x63,0x37,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x5f,0x32,0x32,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x77,0x69,
    0x64,0x74,0x68,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x28,0x63,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,
    0x32,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x68,0x65,0x69,0x67,0x68,0x74,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x38,
    0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x32,
    0x5f,0x73,0x70,0x6c,0x61,0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,
    0x72,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,
    0x38,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x32,0x32,0x5f,0x70,0x61,0x64,0x33,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,
    0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x38,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x52,0x57,0x42,0x79,0x74,0x65,0x41,0x64,0x64,0x72,0x65,0x73,0x73,0x42,0x75,
    0x66,0x66,0x65,0x72,0x20,0x5f,0x31,0x34,0x31,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x75,0x30,0x29,0x3b,0x0a,0x52,0x57,0x42,0x79,0x74,0x65,
    0x41,0x64,0x64,0x72,0x65,0x73,0x73,0x42,0x75,0x66,0x66,0x65,0x72,0x20,0x5f,0x31,
    0x35,0x30,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x75,0x31,
    0x29,0x3b,0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x41,0x72,0x72,0x61,
    0x79,0x3c,0x75,0x69,0x6e,0x74,0x34,0x3e,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,
    0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,
    0x61,0x74,0x65,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x32,0x29,
    0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x75,0x69,0x6e,0x74,0x33,0x20,
    0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x49,0x44,0x3b,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x33,0x20,0x67,0x6c,0x5f,0x47,
    0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,
    0x44,0x20,0x3a,0x20,0x53,0x56,0x5f,0x44,0x69,0x73,0x70,0x61,0x74,0x63,0x68,0x54,
    0x68,0x72,0x65,0x61,0x64,0x49,0x44,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x28,0x75,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x69,
    0x64,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,
    0x37,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,
    0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,0x32,0x5f,0x73,0x70,0x6c,0x61,0x74,0x73,0x5f,
    0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x5f,0x33,0x35,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x70,0x6c,
    0x61,0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2d,0x20,0x28,0x5f,0x32,0x37,0x20,0x2a,
    0x20,0x5f,0x32,0x32,0x5f,0x73,0x70,0x6c,0x61,0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,
    0x6c,0x61,0x79,0x65,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x34,0x20,0x5f,0x36,0x37,0x20,0x3d,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x69,0x6e,0x74,0x34,0x28,
    0x69,0x6e,0x74,0x33,0x28,0x5f,0x33,0x35,0x20,0x25,0x20,0x5f,0x32,0x32,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x2c,0x20,0x5f,0x33,
    0x35,0x20,0x2f,0x20,0x5f,0x32,0x32,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x77,0x69,0x64,0x74,0x68,0x2c,0x20,0x5f,0x32,0x37,0x29,0x2c,0x20,0x30,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x37,0x32,0x20,0x3d,
    0x20,0x5f,0x36,0x37,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x5f,0x32,0x32,0x5f,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x6d,0x69,
    0x6e,0x20,0x2b,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x66,0x6c,0x6f,
    0x61,0x74,0x28,0x28,0x5f,0x37,0x32,0x20,0x3e,0x3e,0x20,0x31,0x36,0x75,0x29,0x20,
    0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x28,0x5f,0x37,0x32,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x5f,0x36,0x37,0x2e,0x79,0x20,0x3e,0x3e,0x20,
    0x31,0x36,0x75,0x29,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x29,0x20,
    0x2a,0x20,0x31,0x2e,0x35,0x32,0x35,0x39,0x30,0x32,0x31,0x38,0x39,0x33,0x31,0x34,
    0x33,0x36,0x35,0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,0x36,0x32,0x35,0x65,
    0x2d,0x30,0x35,0x66,0x29,0x20,0x2a,0x20,0x5f,0x32,0x32,0x5f,0x62,0x6f,0x75,0x6e,
    0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x63,0x6f,0x6d,0x70,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x69,0x6e,0x74,0x28,0x67,0x6c,0x5f,0x47,
    0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,
    0x44,0x2e,0x78,0x29,0x20,0x3e,0x3d,0x20,0x5f,0x32,0x32,0x5f,0x73,0x70,0x6c,0x61,
    0x74,0x5f,0x63,0x6f,0x75,0x6e,0x74,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,
    0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x5f,0x31,0x34,0x31,0x2e,0x53,0x74,0x6f,0x72,0x65,0x28,0x67,0x6c,
    0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x49,0x44,0x2e,0x78,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,0x2c,0x20,0x61,
    0x73,0x75,0x69,0x6e,0x74,0x28,0x64,0x6f,0x74,0x28,0x75,0x6e,0x70,0x61,0x63,0x6b,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,
    0x20,0x2d,0x20,0x5f,0x32,0x32,0x5f,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x70,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x5f,0x32,0x32,0x5f,0x63,0x61,0x6d,0x65,
    0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,0x29,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x5f,0x31,0x35,0x30,0x2e,0x53,0x74,0x6f,0x72,0x65,0x28,0x67,0x6c,
    0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x49,0x44,0x2e,0x78,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,0x2c,0x20,0x67,
    0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x49,0x44,0x2e,0x78,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x5b,0x6e,0x75,0x6d,
    0x74,0x68,0x72,0x65,0x61,0x64,0x73,0x28,0x32,0x35,0x36,0x2c,0x20,0x31,0x2c,0x20,
    0x31,0x29,0x5d,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,
    0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x63,0x6f,0x6d,0x70,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x7d,
    0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct depth_params
    {
        float4 viewMat_row0;
        float4 viewMat_row1;
        float4 viewMat_row2;
        float4 viewMat_row3;
        packed_float3 camera_position;
        float _pad0;
        packed_float3 camera_forward;
        float _pad1;
        packed_float3 bounds_min;
        float _pad2;
        packed_float3 bounds_size;
        int splat_count;
        int texture_width;
        int texture_height;
        int splats_per_layer;
        float _pad3;
    };

    struct DepthValue
    {
        float value;
    };

    struct depth_output
    {
        DepthValue depths[1];
    };

    struct DepthIndexData
    {
        uint value;
    };

    struct index_output
    {
        DepthIndexData indices[1];
    };

    constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(256u, 1u, 1u);

    static inline __attribute__((always_inline))
    float3 unpack_position(thread const uint& splat_idx, constant depth_params& _22, texture2d_array<uint> splat_texture, sampler splat_sampler)
    {
        int _27 = int(splat_idx) / _22.splats_per_layer;
        int _35 = int(splat_idx) - (_27 * _22.splats_per_layer);
        int3 _64 = int3(_35 % _22.texture_width, _35 / _22.texture_width, _27);
        uint4 _67 = splat_texture.read(uint2(_64.xy), uint(_64.z), 0);
        uint _72 = _67.x;
        return float3(_22.bounds_min) + ((float3(float((_72 >> 16u) & 65535u), float(_72 & 65535u), float((_67.y >> 16u) & 65535u)) * 1.525902189314365386962890625e-05) * float3(_22.bounds_size));
    }

    kernel void main0(constant depth_params& _22 [[buffer(0)]], device depth_output& _141 [[buffer(8)]], device index_output& _150 [[buffer(9)]], texture2d_array<uint> splat_texture [[texture(0)]], sampler splat_sampler [[sampler(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
    {
        if (int(gl_GlobalInvocationID.x) >= _22.splat_count)
        {
            return;
        }
        uint param = gl_GlobalInvocationID.x;
        _141.depths[gl_GlobalInvocationID.x].value = dot(unpack_position(param, _22, splat_texture, splat_sampler) - float3(_22.camera_position), float3(_22.camera_forward));
        _150.indices[gl_GlobalInvocationID.x].value = gl_GlobalInvocationID.x;
    }

*/
static const uint8_t depth_calc_source_metal_macos[2145] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,
    0x61,0x74,0x5f,0x72,0x6f,0x77,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x32,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x69,0x65,
    0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,
    0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,0x6d,
    0x65,0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x6d,0x69,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x32,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x63,0x6f,
    0x75,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x68,0x65,0x69,0x67,
    0x68,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,
    0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x33,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,0x56,
    0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,0x65,
    0x20,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,0x49,0x6e,0x64,0x65,
    0x78,0x44,0x61,0x74,0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x69,0x6e,0x64,0x65,0x78,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x44,0x65,0x70,0x74,0x68,0x49,0x6e,0x64,0x65,0x78,
    0x44,0x61,0x74,0x61,0x20,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x31,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x75,0x69,
    0x6e,0x74,0x33,0x20,0x67,0x6c,0x5f,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,
    0x53,0x69,0x7a,0x65,0x20,0x5b,0x5b,0x6d,0x61,0x79,0x62,0x65,0x5f,0x75,0x6e,0x75,
    0x73,0x65,0x64,0x5d,0x5d,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x33,0x28,0x32,0x35,
    0x36,0x75,0x2c,0x20,0x31,0x75,0x2c,0x20,0x31,0x75,0x29,0x3b,0x0a,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x75,
    0x69,0x6e,0x74,0x26,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x2c,0x20,
    0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x32,0x2c,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,0x61,0x79,0x3c,0x75,0x69,0x6e,0x74,
    0x3e,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x70,0x6c,0x61,
    0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,
    0x61,0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x35,0x20,0x3d,0x20,0x69,0x6e,0x74,
    0x28,0x73,0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2d,0x20,0x28,0x5f,
    0x32,0x37,0x20,0x2a,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,0x73,0x5f,
    0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x33,0x20,0x5f,0x36,0x34,0x20,0x3d,0x20,0x69,0x6e,0x74,0x33,0x28,
    0x5f,0x33,0x35,0x20,0x25,0x20,0x5f,0x32,0x32,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x2c,0x20,0x5f,0x33,0x35,0x20,0x2f,0x20,0x5f,
    0x32,0x32,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,
    0x2c,0x20,0x5f,0x32,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x34,0x20,0x5f,0x36,0x37,0x20,0x3d,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2e,0x72,0x65,0x61,0x64,0x28,0x75,0x69,0x6e,0x74,0x32,
    0x28,0x5f,0x36,0x34,0x2e,0x78,0x79,0x29,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,
    0x36,0x34,0x2e,0x7a,0x29,0x2c,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x69,0x6e,0x74,0x20,0x5f,0x37,0x32,0x20,0x3d,0x20,0x5f,0x36,0x37,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x32,0x32,0x2e,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x6d,0x69,
    0x6e,0x29,0x20,0x2b,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x28,0x5f,0x37,0x32,0x20,0x3e,0x3e,0x20,0x31,0x36,0x75,0x29,
    0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x28,0x5f,0x37,0x32,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x5f,0x36,0x37,0x2e,0x79,0x20,0x3e,0x3e,
    0x20,0x31,0x36,0x75,0x29,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x29,
    0x20,0x2a,0x20,0x31,0x2e,0x35,0x32,0x35,0x39,0x30,0x32,0x31,0x38,0x39,0x33,0x31,
    0x34,0x33,0x36,0x35,0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,0x36,0x32,0x35,
    0x65,0x2d,0x30,0x35,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x32,0x32,0x2e,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x6b,0x65,0x72,0x6e,0x65,0x6c,0x20,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,
    0x64,0x65,0x70,0x74,0x68,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,
    0x32,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,
    0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x26,0x20,0x5f,0x31,0x34,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,
    0x66,0x65,0x72,0x28,0x38,0x29,0x5d,0x5d,0x2c,0x20,0x64,0x65,0x76,0x69,0x63,0x65,
    0x20,0x69,0x6e,0x64,0x65,0x78,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x26,0x20,0x5f,
    0x31,0x35,0x30,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x39,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,
    0x61,0x79,0x3c,0x75,0x69,0x6e,0x74,0x3e,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,
    0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x5b,0x5b,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x32,0x29,0x5d,0x5d,0x2c,0x20,0x75,0x69,0x6e,
    0x74,0x33,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x20,0x5b,0x5b,0x74,0x68,0x72,0x65,0x61,
    0x64,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x69,0x6e,0x5f,0x67,0x72,
    0x69,0x64,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x69,0x6e,0x74,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x29,0x20,0x3e,0x3d,0x20,
    0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,0x5f,0x63,0x6f,0x75,0x6e,0x74,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x67,0x6c,
    0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x34,0x31,0x2e,
    0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,
    0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x5d,0x2e,
    0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x75,0x6e,0x70,0x61,
    0x63,0x6b,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x2c,0x20,0x5f,0x32,0x32,0x2c,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x29,0x20,0x2d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x32,0x32,0x2e,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x32,0x32,0x2e,
    0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x5b,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x5d,0x2e,0x76,0x61,0x6c,0x75,
    0x65,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct depth_params
    {
        float4 viewMat_row0;
        float4 viewMat_row1;
        float4 viewMat_row2;
        float4 viewMat_row3;
        packed_float3 camera_position;
        float _pad0;
        packed_float3 camera_forward;
        float _pad1;
        packed_float3 bounds_min;
        float _pad2;
        packed_float3 bounds_size;
        int splat_count;
        int texture_width;
        int texture_height;
        int splats_per_layer;
        float _pad3;
    };

    struct DepthValue
    {
        float value;
    };

    struct depth_output
    {
        DepthValue depths[1];
    };

    struct DepthIndexData
    {
        uint value;
    };

    struct index_output
    {
        DepthIndexData indices[1];
    };

    constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(256u, 1u, 1u);

    static inline __attribute__((always_inline))
    float3 unpack_position(thread const uint& splat_idx, constant depth_params& _22, texture2d_array<uint> splat_texture, sampler splat_sampler)
    {
        int _27 = int(splat_idx) / _22.splats_per_layer;
        int _35 = int(splat_idx) - (_27 * _22.splats_per_layer);
        int3 _64 = int3(_35 % _22.texture_width, _35 / _22.texture_width, _27);
        uint4 _67 = splat_texture.read(uint2(_64.xy), uint(_64.z), 0);
        uint _72 = _67.x;
        return float3(_22.bounds_min) + ((float3(float((_72 >> 16u) & 65535u), float(_72 & 65535u), float((_67.y >> 16u) & 65535u)) * 1.525902189314365386962890625e-05) * float3(_22.bounds_size));
    }

    kernel void main0(constant depth_params& _22 [[buffer(0)]], device depth_output& _141 [[buffer(8)]], device index_output& _150 [[buffer(9)]], texture2d_array<uint> splat_texture [[texture(0)]], sampler splat_sampler [[sampler(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
    {
        if (int(gl_GlobalInvocationID.x) >= _22.splat_count)
        {
            return;
        }
        uint param = gl_GlobalInvocationID.x;
        _141.depths[gl_GlobalInvocationID.x].value = dot(unpack_position(param, _22, splat_texture, splat_sampler) - float3(_22.camera_position), float3(_22.camera_forward));
        _150.indices[gl_GlobalInvocationID.x].value = gl_GlobalInvocationID.x;
    }

*/
static const uint8_t depth_calc_source_metal_ios[2145] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,
    0x61,0x74,0x5f,0x72,0x6f,0x77,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x32,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x69,0x65,
    0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,
    0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,0x6d,
    0x65,0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x6d,0x69,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x32,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x63,0x6f,
    0x75,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x68,0x65,0x69,0x67,
    0x68,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,
    0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x33,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,0x56,
    0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,0x65,
    0x20,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,0x49,0x6e,0x64,0x65,
    0x78,0x44,0x61,0x74,0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x69,0x6e,0x64,0x65,0x78,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x44,0x65,0x70,0x74,0x68,0x49,0x6e,0x64,0x65,0x78,
    0x44,0x61,0x74,0x61,0x20,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x31,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x75,0x69,
    0x6e,0x74,0x33,0x20,0x67,0x6c,0x5f,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,
    0x53,0x69,0x7a,0x65,0x20,0x5b,0x5b,0x6d,0x61,0x79,0x62,0x65,0x5f,0x75,0x6e,0x75,
    0x73,0x65,0x64,0x5d,0x5d,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x33,0x28,0x32,0x35,
    0x36,0x75,0x2c,0x20,0x31,0x75,0x2c,0x20,0x31,0x75,0x29,0x3b,0x0a,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x75,
    0x69,0x6e,0x74,0x26,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x2c,0x20,
    0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x32,0x2c,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,0x61,0x79,0x3c,0x75,0x69,0x6e,0x74,
    0x3e,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x70,0x6c,0x61,
    0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,
    0x61,0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x35,0x20,0x3d,0x20,0x69,0x6e,0x74,
    0x28,0x73,0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2d,0x20,0x28,0x5f,
    0x32,0x37,0x20,0x2a,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,0x73,0x5f,
    0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x33,0x20,0x5f,0x36,0x34,0x20,0x3d,0x20,0x69,0x6e,0x74,0x33,0x28,
    0x5f,0x33,0x35,0x20,0x25,0x20,0x5f,0x32,0x32,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x2c,0x20,0x5f,0x33,0x35,0x20,0x2f,0x20,0x5f,
    0x32,0x32,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,
    0x2c,0x20,0x5f,0x32,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x34,0x20,0x5f,0x36,0x37,0x20,0x3d,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2e,0x72,0x65,0x61,0x64,0x28,0x75,0x69,0x6e,0x74,0x32,
    0x28,0x5f,0x36,0x34,0x2e,0x78,0x79,0x29,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,
    0x36,0x34,0x2e,0x7a,0x29,0x2c,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x69,0x6e,0x74,0x20,0x5f,0x37,0x32,0x20,0x3d,0x20,0x5f,0x36,0x37,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x32,0x32,0x2e,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x6d,0x69,
    0x6e,0x29,0x20,0x2b,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x28,0x5f,0x37,0x32,0x20,0x3e,0x3e,0x20,0x31,0x36,0x75,0x29,
    0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x28,0x5f,0x37,0x32,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x5f,0x36,0x37,0x2e,0x79,0x20,0x3e,0x3e,
    0x20,0x31,0x36,0x75,0x29,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x29,
    0x20,0x2a,0x20,0x31,0x2e,0x35,0x32,0x35,0x39,0x30,0x32,0x31,0x38,0x39,0x33,0x31,
    0x34,0x33,0x36,0x35,0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,0x36,0x32,0x35,
    0x65,0x2d,0x30,0x35,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x32,0x32,0x2e,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x6b,0x65,0x72,0x6e,0x65,0x6c,0x20,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,
    0x64,0x65,0x70,0x74,0x68,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,
    0x32,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,
    0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x26,0x20,0x5f,0x31,0x34,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,
    0x66,0x65,0x72,0x28,0x38,0x29,0x5d,0x5d,0x2c,0x20,0x64,0x65,0x76,0x69,0x63,0x65,
    0x20,0x69,0x6e,0x64,0x65,0x78,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x26,0x20,0x5f,
    0x31,0x35,0x30,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x39,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,
    0x61,0x79,0x3c,0x75,0x69,0x6e,0x74,0x3e,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,
    0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x5b,0x5b,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x32,0x29,0x5d,0x5d,0x2c,0x20,0x75,0x69,0x6e,
    0x74,0x33,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x20,0x5b,0x5b,0x74,0x68,0x72,0x65,0x61,
    0x64,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x69,0x6e,0x5f,0x67,0x72,
    0x69,0x64,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x69,0x6e,0x74,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x29,0x20,0x3e,0x3d,0x20,
    0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,0x5f,0x63,0x6f,0x75,0x6e,0x74,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x67,0x6c,
    0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x34,0x31,0x2e,
    0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,
    0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x5d,0x2e,
    0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x75,0x6e,0x70,0x61,
    0x63,0x6b,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x2c,0x20,0x5f,0x32,0x32,0x2c,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x29,0x20,0x2d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x32,0x32,0x2e,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x32,0x32,0x2e,
    0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x5b,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x5d,0x2e,0x76,0x61,0x6c,0x75,
    0x65,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct depth_params
    {
        float4 viewMat_row0;
        float4 viewMat_row1;
        float4 viewMat_row2;
        float4 viewMat_row3;
        packed_float3 camera_position;
        float _pad0;
        packed_float3 camera_forward;
        float _pad1;
        packed_float3 bounds_min;
        float _pad2;
        packed_float3 bounds_size;
        int splat_count;
        int texture_width;
        int texture_height;
        int splats_per_layer;
        float _pad3;
    };

    struct DepthValue
    {
        float value;
    };

    struct depth_output
    {
        DepthValue depths[1];
    };

    struct DepthIndexData
    {
        uint value;
    };

    struct index_output
    {
        DepthIndexData indices[1];
    };

    constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(256u, 1u, 1u);

    static inline __attribute__((always_inline))
    float3 unpack_position(thread const uint& splat_idx, constant depth_params& _22, texture2d_array<uint> splat_texture, sampler splat_sampler)
    {
        int _27 = int(splat_idx) / _22.splats_per_layer;
        int _35 = int(splat_idx) - (_27 * _22.splats_per_layer);
        int3 _64 = int3(_35 % _22.texture_width, _35 / _22.texture_width, _27);
        uint4 _67 = splat_texture.read(uint2(_64.xy), uint(_64.z), 0);
        uint _72 = _67.x;
        return float3(_22.bounds_min) + ((float3(float((_72 >> 16u) & 65535u), float(_72 & 65535u), float((_67.y >> 16u) & 65535u)) * 1.525902189314365386962890625e-05) * float3(_22.bounds_size));
    }

    kernel void main0(constant depth_params& _22 [[buffer(0)]], device depth_output& _141 [[buffer(8)]], device index_output& _150 [[buffer(9)]], texture2d_array<uint> splat_texture [[texture(0)]], sampler splat_sampler [[sampler(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
    {
        if (int(gl_GlobalInvocationID.x) >= _22.splat_count)
        {
            return;
        }
        uint param = gl_GlobalInvocationID.x;
        _141.depths[gl_GlobalInvocationID.x].value = dot(unpack_position(param, _22, splat_texture, splat_sampler) - float3(_22.camera_position), float3(_22.camera_forward));
        _150.indices[gl_GlobalInvocationID.x].value = gl_GlobalInvocationID.x;
    }

*/
static const uint8_t depth_calc_source_metal_sim[2145] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,
    0x61,0x74,0x5f,0x72,0x6f,0x77,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x32,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x69,0x65,
    0x77,0x4d,0x61,0x74,0x5f,0x72,0x6f,0x77,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,
    0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,0x6d,
    0x65,0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x6d,0x69,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x32,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x70,0x61,0x63,0x6b,0x65,0x64,0x5f,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x63,0x6f,
    0x75,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x68,0x65,0x69,0x67,
    0x68,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x73,0x70,0x6c,0x61,
    0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x70,0x61,0x64,0x33,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,0x56,
    0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,0x65,
    0x20,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x44,0x65,0x70,0x74,0x68,0x49,0x6e,0x64,0x65,
    0x78,0x44,0x61,0x74,0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x69,0x6e,0x64,0x65,0x78,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x44,0x65,0x70,0x74,0x68,0x49,0x6e,0x64,0x65,0x78,
    0x44,0x61,0x74,0x61,0x20,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x31,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x75,0x69,
    0x6e,0x74,0x33,0x20,0x67,0x6c,0x5f,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,
    0x53,0x69,0x7a,0x65,0x20,0x5b,0x5b,0x6d,0x61,0x79,0x62,0x65,0x5f,0x75,0x6e,0x75,
    0x73,0x65,0x64,0x5d,0x5d,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x33,0x28,0x32,0x35,
    0x36,0x75,0x2c,0x20,0x31,0x75,0x2c,0x20,0x31,0x75,0x29,0x3b,0x0a,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x75,
    0x69,0x6e,0x74,0x26,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x2c,0x20,
    0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x32,0x2c,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,0x61,0x79,0x3c,0x75,0x69,0x6e,0x74,
    0x3e,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x2c,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x70,0x6c,0x61,
    0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,
    0x61,0x74,0x73,0x5f,0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x35,0x20,0x3d,0x20,0x69,0x6e,0x74,
    0x28,0x73,0x70,0x6c,0x61,0x74,0x5f,0x69,0x64,0x78,0x29,0x20,0x2d,0x20,0x28,0x5f,
    0x32,0x37,0x20,0x2a,0x20,0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,0x73,0x5f,
    0x70,0x65,0x72,0x5f,0x6c,0x61,0x79,0x65,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x33,0x20,0x5f,0x36,0x34,0x20,0x3d,0x20,0x69,0x6e,0x74,0x33,0x28,
    0x5f,0x33,0x35,0x20,0x25,0x20,0x5f,0x32,0x32,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x77,0x69,0x64,0x74,0x68,0x2c,0x20,0x5f,0x33,0x35,0x20,0x2f,0x20,0x5f,
    0x32,0x32,0x2e,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x77,0x69,0x64,0x74,0x68,
    0x2c,0x20,0x5f,0x32,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x34,0x20,0x5f,0x36,0x37,0x20,0x3d,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2e,0x72,0x65,0x61,0x64,0x28,0x75,0x69,0x6e,0x74,0x32,
    0x28,0x5f,0x36,0x34,0x2e,0x78,0x79,0x29,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,
    0x36,0x34,0x2e,0x7a,0x29,0x2c,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x69,0x6e,0x74,0x20,0x5f,0x37,0x32,0x20,0x3d,0x20,0x5f,0x36,0x37,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x32,0x32,0x2e,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x6d,0x69,
    0x6e,0x29,0x20,0x2b,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x28,0x5f,0x37,0x32,0x20,0x3e,0x3e,0x20,0x31,0x36,0x75,0x29,
    0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x28,0x5f,0x37,0x32,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x5f,0x36,0x37,0x2e,0x79,0x20,0x3e,0x3e,
    0x20,0x31,0x36,0x75,0x29,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x29,
    0x20,0x2a,0x20,0x31,0x2e,0x35,0x32,0x35,0x39,0x30,0x32,0x31,0x38,0x39,0x33,0x31,
    0x34,0x33,0x36,0x35,0x33,0x38,0x36,0x39,0x36,0x32,0x38,0x39,0x30,0x36,0x32,0x35,
    0x65,0x2d,0x30,0x35,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x32,0x32,0x2e,0x62,0x6f,0x75,0x6e,0x64,0x73,0x5f,0x73,0x69,0x7a,0x65,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x6b,0x65,0x72,0x6e,0x65,0x6c,0x20,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,
    0x64,0x65,0x70,0x74,0x68,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,
    0x32,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,
    0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x26,0x20,0x5f,0x31,0x34,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,
    0x66,0x65,0x72,0x28,0x38,0x29,0x5d,0x5d,0x2c,0x20,0x64,0x65,0x76,0x69,0x63,0x65,
    0x20,0x69,0x6e,0x64,0x65,0x78,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x26,0x20,0x5f,
    0x31,0x35,0x30,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x39,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x5f,0x61,0x72,0x72,
    0x61,0x79,0x3c,0x75,0x69,0x6e,0x74,0x3e,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,
    0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x5b,0x5b,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x32,0x29,0x5d,0x5d,0x2c,0x20,0x75,0x69,0x6e,
    0x74,0x33,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x20,0x5b,0x5b,0x74,0x68,0x72,0x65,0x61,
    0x64,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x69,0x6e,0x5f,0x67,0x72,
    0x69,0x64,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x69,0x6e,0x74,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x29,0x20,0x3e,0x3d,0x20,
    0x5f,0x32,0x32,0x2e,0x73,0x70,0x6c,0x61,0x74,0x5f,0x63,0x6f,0x75,0x6e,0x74,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x67,0x6c,
    0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x34,0x31,0x2e,
    0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,
    0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x5d,0x2e,
    0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x75,0x6e,0x70,0x61,
    0x63,0x6b,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x2c,0x20,0x5f,0x32,0x32,0x2c,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x2c,0x20,0x73,0x70,0x6c,0x61,0x74,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x29,0x20,0x2d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x32,0x32,0x2e,0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x32,0x32,0x2e,
    0x63,0x61,0x6d,0x65,0x72,0x61,0x5f,0x66,0x6f,0x72,0x77,0x61,0x72,0x64,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x35,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x5b,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x5d,0x2e,0x76,0x61,0x6c,0x75,
    0x65,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
static inline const sg_shader_desc* depth_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)depth_calc_source_glsl410;
            desc.compute_func.entry = "main";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 144;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "_22.viewMat_row0";
            desc.uniform_blocks[0].glsl_uniforms[1].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[1].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[1].glsl_name = "_22.viewMat_row1";
            desc.uniform_blocks[0].glsl_uniforms[2].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[2].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[2].glsl_name = "_22.viewMat_row2";
            desc.uniform_blocks[0].glsl_uniforms[3].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[3].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[3].glsl_name = "_22.viewMat_row3";
            desc.uniform_blocks[0].glsl_uniforms[4].type = SG_UNIFORMTYPE_FLOAT3;
            desc.uniform_blocks[0].glsl_uniforms[4].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[4].glsl_name = "_22.camera_position";
            desc.uniform_blocks[0].glsl_uniforms[5].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[5].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[5].glsl_name = "_22._pad0";
            desc.uniform_blocks[0].glsl_uniforms[6].type = SG_UNIFORMTYPE_FLOAT3;
            desc.uniform_blocks[0].glsl_uniforms[6].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[6].glsl_name = "_22.camera_forward";
            desc.uniform_blocks[0].glsl_uniforms[7].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[7].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[7].glsl_name = "_22._pad1";
            desc.uniform_blocks[0].glsl_uniforms[8].type = SG_UNIFORMTYPE_FLOAT3;
            desc.uniform_blocks[0].glsl_uniforms[8].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[8].glsl_name = "_22.bounds_min";
            desc.uniform_blocks[0].glsl_uniforms[9].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[9].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[9].glsl_name = "_22._pad2";
            desc.uniform_blocks[0].glsl_uniforms[10].type = SG_UNIFORMTYPE_FLOAT3;
            desc.uniform_blocks[0].glsl_uniforms[10].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[10].glsl_name = "_22.bounds_size";
            desc.uniform_blocks[0].glsl_uniforms[11].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[11].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[11].glsl_name = "_22.splat_count";
            desc.uniform_blocks[0].glsl_uniforms[12].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[12].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[12].glsl_name = "_22.texture_width";
            desc.uniform_blocks[0].glsl_uniforms[13].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[13].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[13].glsl_name = "_22.texture_height";
            desc.uniform_blocks[0].glsl_uniforms[14].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[14].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[14].glsl_name = "_22.splats_per_layer";
            desc.uniform_blocks[0].glsl_uniforms[15].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[15].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[15].glsl_name = "_22._pad3";
            desc.views[1].texture.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].texture.image_type = SG_IMAGETYPE_ARRAY;
            desc.views[1].texture.sample_type = SG_IMAGESAMPLETYPE_UINT;
            desc.views[1].texture.multisampled = false;
            desc.views[3].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[3].storage_buffer.readonly = false;
            desc.views[3].storage_buffer.glsl_binding_n = 3;
            desc.views[4].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[4].storage_buffer.readonly = false;
            desc.views[4].storage_buffer.glsl_binding_n = 4;
            desc.samplers[2].stage = SG_SHADERSTAGE_COMPUTE;
            desc.samplers[2].sampler_type = SG_SAMPLERTYPE_NONFILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.texture_sampler_pairs[0].view_slot = 1;
            desc.texture_sampler_pairs[0].sampler_slot = 2;
            desc.texture_sampler_pairs[0].glsl_name = "splat_texture_splat_sampler";
            desc.label = "depth_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)depth_calc_source_glsl310es;
            desc.compute_func.entry = "main";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 144;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "_22.viewMat_row0";
            desc.uniform_blocks[0].glsl_uniforms[1].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[1].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[1].glsl_name = "_22.viewMat_row1";
            desc.uniform_blocks[0].glsl_uniforms[2].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[2].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[2].glsl_name = "_22.viewMat_row2";
            desc.uniform_blocks[0].glsl_uniforms[3].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[3].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[3].glsl_name = "_22.viewMat_row3";
            desc.uniform_blocks[0].glsl_uniforms[4].type = SG_UNIFORMTYPE_FLOAT3;
            desc.uniform_blocks[0].glsl_uniforms[4].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[4].glsl_name = "_22.camera_position";
            desc.uniform_blocks[0].glsl_uniforms[5].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[5].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[5].glsl_name = "_22._pad0";
            desc.uniform_blocks[0].glsl_uniforms[6].type = SG_UNIFORMTYPE_FLOAT3;
            desc.uniform_blocks[0].glsl_uniforms[6].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[6].glsl_name = "_22.camera_forward";
            desc.uniform_blocks[0].glsl_uniforms[7].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[7].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[7].glsl_name = "_22._pad1";
            desc.uniform_blocks[0].glsl_uniforms[8].type = SG_UNIFORMTYPE_FLOAT3;
            desc.uniform_blocks[0].glsl_uniforms[8].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[8].glsl_name = "_22.bounds_min";
            desc.uniform_blocks[0].glsl_uniforms[9].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[9].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[9].glsl_name = "_22._pad2";
            desc.uniform_blocks[0].glsl_uniforms[10].type = SG_UNIFORMTYPE_FLOAT3;
            desc.uniform_blocks[0].glsl_uniforms[10].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[10].glsl_name = "_22.bounds_size";
            desc.uniform_blocks[0].glsl_uniforms[11].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[11].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[11].glsl_name = "_22.splat_count";
            desc.uniform_blocks[0].glsl_uniforms[12].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[12].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[12].glsl_name = "_22.texture_width";
            desc.uniform_blocks[0].glsl_uniforms[13].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[13].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[13].glsl_name = "_22.texture_height";
            desc.uniform_blocks[0].glsl_uniforms[14].type = SG_UNIFORMTYPE_INT;
            desc.uniform_blocks[0].glsl_uniforms[14].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[14].glsl_name = "_22.splats_per_layer";
            desc.uniform_blocks[0].glsl_uniforms[15].type = SG_UNIFORMTYPE_FLOAT;
            desc.uniform_blocks[0].glsl_uniforms[15].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[15].glsl_name = "_22._pad3";
            desc.views[1].texture.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].texture.image_type = SG_IMAGETYPE_ARRAY;
            desc.views[1].texture.sample_type = SG_IMAGESAMPLETYPE_UINT;
            desc.views[1].texture.multisampled = false;
            desc.views[3].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[3].storage_buffer.readonly = false;
            desc.views[3].storage_buffer.glsl_binding_n = 3;
            desc.views[4].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[4].storage_buffer.readonly = false;
            desc.views[4].storage_buffer.glsl_binding_n = 4;
            desc.samplers[2].stage = SG_SHADERSTAGE_COMPUTE;
            desc.samplers[2].sampler_type = SG_SAMPLERTYPE_NONFILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.texture_sampler_pairs[0].view_slot = 1;
            desc.texture_sampler_pairs[0].sampler_slot = 2;
            desc.texture_sampler_pairs[0].glsl_name = "splat_texture_splat_sampler";
            desc.label = "depth_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)depth_calc_source_hlsl5;
            desc.compute_func.d3d11_target = "cs_5_0";
            desc.compute_func.entry = "main";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 144;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.views[1].texture.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].texture.image_type = SG_IMAGETYPE_ARRAY;
            desc.views[1].texture.sample_type = SG_IMAGESAMPLETYPE_UINT;
            desc.views[1].texture.multisampled = false;
            desc.views[1].texture.hlsl_register_t_n = 0;
            desc.views[3].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[3].storage_buffer.readonly = false;
            desc.views[3].storage_buffer.hlsl_register_u_n = 0;
            desc.views[4].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[4].storage_buffer.readonly = false;
            desc.views[4].storage_buffer.hlsl_register_u_n = 1;
            desc.samplers[2].stage = SG_SHADERSTAGE_COMPUTE;
            desc.samplers[2].sampler_type = SG_SAMPLERTYPE_NONFILTERING;
            desc.samplers[2].hlsl_register_s_n = 2;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.texture_sampler_pairs[0].view_slot = 1;
            desc.texture_sampler_pairs[0].sampler_slot = 2;
            desc.label = "depth_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)depth_calc_source_metal_macos;
            desc.compute_func.entry = "main0";
            desc.mtl_threads_per_threadgroup.x = 256;
            desc.mtl_threads_per_threadgroup.y = 1;
            desc.mtl_threads_per_threadgroup.z = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 144;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.views[1].texture.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].texture.image_type = SG_IMAGETYPE_ARRAY;
            desc.views[1].texture.sample_type = SG_IMAGESAMPLETYPE_UINT;
            desc.views[1].texture.multisampled = false;
            desc.views[1].texture.msl_texture_n = 0;
            desc.views[3].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[3].storage_buffer.readonly = false;
            desc.views[3].storage_buffer.msl_buffer_n = 8;
            desc.views[4].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[4].storage_buffer.readonly = false;
            desc.views[4].storage_buffer.msl_buffer_n = 9;
            desc.samplers[2].stage = SG_SHADERSTAGE_COMPUTE;
            desc.samplers[2].sampler_type = SG_SAMPLERTYPE_NONFILTERING;
            desc.samplers[2].msl_sampler_n = 2;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.texture_sampler_pairs[0].view_slot = 1;
            desc.texture_sampler_pairs[0].sampler_slot = 2;
            desc.label = "depth_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_IOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)depth_calc_source_metal_ios;
            desc.compute_func.entry = "main0";
            desc.mtl_threads_per_threadgroup.x = 256;
            desc.mtl_threads_per_threadgroup.y = 1;
            desc.mtl_threads_per_threadgroup.z = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 144;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.views[1].texture.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].texture.image_type = SG_IMAGETYPE_ARRAY;
            desc.views[1].texture.sample_type = SG_IMAGESAMPLETYPE_UINT;
            desc.views[1].texture.multisampled = false;
            desc.views[1].texture.msl_texture_n = 0;
            desc.views[3].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[3].storage_buffer.readonly = false;
            desc.views[3].storage_buffer.msl_buffer_n = 8;
            desc.views[4].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[4].storage_buffer.readonly = false;
            desc.views[4].storage_buffer.msl_buffer_n = 9;
            desc.samplers[2].stage = SG_SHADERSTAGE_COMPUTE;
            desc.samplers[2].sampler_type = SG_SAMPLERTYPE_NONFILTERING;
            desc.samplers[2].msl_sampler_n = 2;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.texture_sampler_pairs[0].view_slot = 1;
            desc.texture_sampler_pairs[0].sampler_slot = 2;
            desc.label = "depth_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_SIMULATOR) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)depth_calc_source_metal_sim;
            desc.compute_func.entry = "main0";
            desc.mtl_threads_per_threadgroup.x = 256;
            desc.mtl_threads_per_threadgroup.y = 1;
            desc.mtl_threads_per_threadgroup.z = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 144;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.views[1].texture.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].texture.image_type = SG_IMAGETYPE_ARRAY;
            desc.views[1].texture.sample_type = SG_IMAGESAMPLETYPE_UINT;
            desc.views[1].texture.multisampled = false;
            desc.views[1].texture.msl_texture_n = 0;
            desc.views[3].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[3].storage_buffer.readonly = false;
            desc.views[3].storage_buffer.msl_buffer_n = 8;
            desc.views[4].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[4].storage_buffer.readonly = false;
            desc.views[4].storage_buffer.msl_buffer_n = 9;
            desc.samplers[2].stage = SG_SHADERSTAGE_COMPUTE;
            desc.samplers[2].sampler_type = SG_SAMPLERTYPE_NONFILTERING;
            desc.samplers[2].msl_sampler_n = 2;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.texture_sampler_pairs[0].view_slot = 1;
            desc.texture_sampler_pairs[0].sampler_slot = 2;
            desc.label = "depth_shader";
        }
        return &desc;
    }
    return 0;
}
