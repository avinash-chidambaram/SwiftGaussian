#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i ./ios-splats/ios-splats/core/rendering/sort.glsl -o ./ios-splats/ios-splats/core/rendering/sort.glsl.h -l metal_ios:metal_sim:metal_macos:hlsl5:glsl310es:glsl410

    Overview:
    =========
    Shader program: 'sort':
        Get shader desc: sort_shader_desc(sg_query_backend());
        Compute Shader: bitonic_sort
    Bindings:
        Uniform block 'sort_params':
            C struct: sort_params_t
            Bind slot: UB_sort_params => 0
        Storage buffer 'index_buffer':
            C struct: SortIndexData_t
            Bind slot: VIEW_index_buffer => 1
            Readonly: false
        Storage buffer 'depth_input':
            C struct: SortDepthValue_t
            Bind slot: VIEW_depth_input => 0
            Readonly: true
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before sort.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define UB_sort_params (0)
#define VIEW_index_buffer (1)
#define VIEW_depth_input (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct sort_params_t {
    int stage;
    int _step;
    int count;
    int _pad;
} sort_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(4) typedef struct SortIndexData_t {
    uint32_t value;
} SortIndexData_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(4) typedef struct SortDepthValue_t {
    float value;
} SortDepthValue_t;
#pragma pack(pop)
/*
    #version 410
    #extension GL_ARB_compute_shader : require
    layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

    struct SortIndexData
    {
        uint value;
    };

    struct SortDepthValue
    {
        float value;
    };

    uniform ivec4 sort_params[1];
    layout(std430) buffer index_buffer
    {
        SortIndexData indices[];
    } _80;

    layout(std430) readonly buffer depth_input
    {
        SortDepthValue depths[];
    } _96;

    void main()
    {
        uint _26 = uint(sort_params[0].y);
        uint _27 = 1u << _26;
        uint _47 = ((gl_GlobalInvocationID.x / _27) * (2u << _26)) + (gl_GlobalInvocationID.x % _27);
        uint _51 = _47 + _27;
        if (_51 >= uint(sort_params[0].z))
        {
            return;
        }
        uint _84 = _80.indices[_47].value;
        bool _107;
        if (((_47 / (2u << uint(sort_params[0].x))) & 1u) == 0u)
        {
            _107 = _96.depths[_84].value < _96.depths[_80.indices[_51].value].value;
        }
        else
        {
            _107 = _96.depths[_84].value > _96.depths[_80.indices[_51].value].value;
        }
        if (_107)
        {
            _80.indices[_47].value = _80.indices[_51].value;
            _80.indices[_51].value = _84;
        }
    }

*/
static const uint8_t bitonic_sort_source_glsl410[1103] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x23,0x65,0x78,
    0x74,0x65,0x6e,0x73,0x69,0x6f,0x6e,0x20,0x47,0x4c,0x5f,0x41,0x52,0x42,0x5f,0x63,
    0x6f,0x6d,0x70,0x75,0x74,0x65,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x20,0x3a,0x20,
    0x72,0x65,0x71,0x75,0x69,0x72,0x65,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x6c,0x5f,0x73,0x69,0x7a,0x65,0x5f,0x78,0x20,0x3d,0x20,0x32,0x35,
    0x36,0x2c,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x73,0x69,0x7a,0x65,0x5f,0x79,0x20,
    0x3d,0x20,0x31,0x2c,0x20,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x73,0x69,0x7a,0x65,0x5f,
    0x7a,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x76,0x61,0x6c,0x75,
    0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x6f,
    0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x69,0x76,0x65,0x63,
    0x34,0x20,0x73,0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x73,0x74,0x64,0x34,0x33,0x30,0x29,
    0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x69,0x6e,0x64,0x65,0x78,0x5f,0x62,0x75,
    0x66,0x66,0x65,0x72,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x53,0x6f,0x72,0x74,0x49,
    0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x20,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,
    0x5b,0x5d,0x3b,0x0a,0x7d,0x20,0x5f,0x38,0x30,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x73,0x74,0x64,0x34,0x33,0x30,0x29,0x20,0x72,0x65,0x61,0x64,0x6f,
    0x6e,0x6c,0x79,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x64,0x65,0x70,0x74,0x68,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x53,0x6f,0x72,
    0x74,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,0x65,0x20,0x64,0x65,0x70,0x74,
    0x68,0x73,0x5b,0x5d,0x3b,0x0a,0x7d,0x20,0x5f,0x39,0x36,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x69,0x6e,0x74,0x20,0x5f,0x32,0x36,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,
    0x73,0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x79,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x32,0x37,0x20,
    0x3d,0x20,0x31,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,0x28,0x28,0x67,0x6c,
    0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x49,0x44,0x2e,0x78,0x20,0x2f,0x20,0x5f,0x32,0x37,0x29,0x20,0x2a,0x20,0x28,
    0x32,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x29,0x29,0x20,0x2b,0x20,0x28,0x67,
    0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x25,0x20,0x5f,0x32,0x37,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x35,0x31,0x20,0x3d,0x20,0x5f,0x34,
    0x37,0x20,0x2b,0x20,0x5f,0x32,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x35,0x31,0x20,0x3e,0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,0x73,0x6f,0x72,
    0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x7a,0x29,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x69,0x6e,0x74,0x20,0x5f,0x38,0x34,0x20,0x3d,0x20,0x5f,0x38,0x30,0x2e,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x34,0x37,0x5d,0x2e,0x76,0x61,0x6c,0x75,
    0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x30,0x37,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x28,0x5f,0x34,0x37,0x20,
    0x2f,0x20,0x28,0x32,0x75,0x20,0x3c,0x3c,0x20,0x75,0x69,0x6e,0x74,0x28,0x73,0x6f,
    0x72,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x29,
    0x29,0x20,0x26,0x20,0x31,0x75,0x29,0x20,0x3d,0x3d,0x20,0x30,0x75,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x30,
    0x37,0x20,0x3d,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,
    0x38,0x34,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,0x3c,0x20,0x5f,0x39,0x36,0x2e,
    0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x5d,0x2e,0x76,
    0x61,0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,
    0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x34,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,
    0x3e,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x30,0x37,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,
    0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x34,0x37,0x5d,0x2e,0x76,
    0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,
    0x5f,0x38,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 310 es
    layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

    struct SortIndexData
    {
        uint value;
    };

    struct SortDepthValue
    {
        float value;
    };

    uniform ivec4 sort_params[1];
    layout(binding = 1, std430) buffer index_buffer
    {
        SortIndexData indices[];
    } _80;

    layout(binding = 0, std430) readonly buffer depth_input
    {
        SortDepthValue depths[];
    } _96;

    void main()
    {
        uint _26 = uint(sort_params[0].y);
        uint _27 = 1u << _26;
        uint _47 = ((gl_GlobalInvocationID.x / _27) * (2u << _26)) + (gl_GlobalInvocationID.x % _27);
        uint _51 = _47 + _27;
        if (_51 >= uint(sort_params[0].z))
        {
            return;
        }
        uint _84 = _80.indices[_47].value;
        bool _107;
        if (((_47 / (2u << uint(sort_params[0].x))) & 1u) == 0u)
        {
            _107 = _96.depths[_84].value < _96.depths[_80.indices[_51].value].value;
        }
        else
        {
            _107 = _96.depths[_84].value > _96.depths[_80.indices[_51].value].value;
        }
        if (_107)
        {
            _80.indices[_47].value = _80.indices[_51].value;
            _80.indices[_51].value = _84;
        }
    }

*/
static const uint8_t bitonic_sort_source_glsl310es[1089] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x31,0x30,0x20,0x65,0x73,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x6c,0x5f,0x73,0x69,0x7a,
    0x65,0x5f,0x78,0x20,0x3d,0x20,0x32,0x35,0x36,0x2c,0x20,0x6c,0x6f,0x63,0x61,0x6c,
    0x5f,0x73,0x69,0x7a,0x65,0x5f,0x79,0x20,0x3d,0x20,0x31,0x2c,0x20,0x6c,0x6f,0x63,
    0x61,0x6c,0x5f,0x73,0x69,0x7a,0x65,0x5f,0x7a,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x49,
    0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x69,0x6e,0x74,0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,
    0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x73,0x6f,0x72,0x74,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,0x3d,0x20,0x31,0x2c,0x20,0x73,0x74,
    0x64,0x34,0x33,0x30,0x29,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x69,0x6e,0x64,
    0x65,0x78,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x53,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x20,0x69,0x6e,
    0x64,0x69,0x63,0x65,0x73,0x5b,0x5d,0x3b,0x0a,0x7d,0x20,0x5f,0x38,0x30,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,
    0x3d,0x20,0x30,0x2c,0x20,0x73,0x74,0x64,0x34,0x33,0x30,0x29,0x20,0x72,0x65,0x61,
    0x64,0x6f,0x6e,0x6c,0x79,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x64,0x65,0x70,
    0x74,0x68,0x5f,0x69,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x53,
    0x6f,0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,0x65,0x20,0x64,0x65,
    0x70,0x74,0x68,0x73,0x5b,0x5d,0x3b,0x0a,0x7d,0x20,0x5f,0x39,0x36,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x32,0x36,0x20,0x3d,0x20,0x75,0x69,0x6e,
    0x74,0x28,0x73,0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x32,
    0x37,0x20,0x3d,0x20,0x31,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,0x28,0x28,
    0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x2f,0x20,0x5f,0x32,0x37,0x29,0x20,0x2a,
    0x20,0x28,0x32,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x29,0x29,0x20,0x2b,0x20,
    0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x25,0x20,0x5f,0x32,0x37,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x35,0x31,0x20,0x3d,0x20,
    0x5f,0x34,0x37,0x20,0x2b,0x20,0x5f,0x32,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x35,0x31,0x20,0x3e,0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,0x73,
    0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x7a,0x29,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x38,0x34,0x20,0x3d,0x20,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x34,0x37,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,
    0x30,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x28,0x5f,0x34,
    0x37,0x20,0x2f,0x20,0x28,0x32,0x75,0x20,0x3c,0x3c,0x20,0x75,0x69,0x6e,0x74,0x28,
    0x73,0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,
    0x29,0x29,0x29,0x20,0x26,0x20,0x31,0x75,0x29,0x20,0x3d,0x3d,0x20,0x30,0x75,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,
    0x31,0x30,0x37,0x20,0x3d,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,
    0x5b,0x5f,0x38,0x34,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,0x3c,0x20,0x5f,0x39,
    0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x5d,
    0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,0x5f,0x39,0x36,0x2e,
    0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x34,0x5d,0x2e,0x76,0x61,0x6c,0x75,
    0x65,0x20,0x3e,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,
    0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,
    0x76,0x61,0x6c,0x75,0x65,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x30,0x37,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x34,0x37,0x5d,
    0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,
    0x3d,0x20,0x5f,0x38,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    struct SortIndexData
    {
        uint value;
    };

    struct SortDepthValue
    {
        float value;
    };

    static const uint3 gl_WorkGroupSize = uint3(256u, 1u, 1u);

    cbuffer sort_params : register(b0)
    {
        int _21_stage : packoffset(c0);
        int _21_step : packoffset(c0.y);
        int _21_count : packoffset(c0.z);
        int _21_pad : packoffset(c0.w);
    };

    RWByteAddressBuffer _80 : register(u0);
    ByteAddressBuffer _96 : register(t0);

    static uint3 gl_GlobalInvocationID;
    struct SPIRV_Cross_Input
    {
        uint3 gl_GlobalInvocationID : SV_DispatchThreadID;
    };

    void comp_main()
    {
        uint _26 = uint(_21_step);
        uint _27 = 1u << _26;
        uint _47 = ((gl_GlobalInvocationID.x / _27) * (2u << _26)) + (gl_GlobalInvocationID.x % _27);
        uint _51 = _47 + _27;
        if (_51 >= uint(_21_count))
        {
            return;
        }
        uint _84 = _80.Load(_47 * 4 + 0);
        bool _107;
        if (((_47 / (2u << uint(_21_stage))) & 1u) == 0u)
        {
            _107 = asfloat(_96.Load(_84 * 4 + 0)) < asfloat(_96.Load(_80.Load(_51 * 4 + 0) * 4 + 0));
        }
        else
        {
            _107 = asfloat(_96.Load(_84 * 4 + 0)) > asfloat(_96.Load(_80.Load(_51 * 4 + 0) * 4 + 0));
        }
        if (_107)
        {
            _80.Store(_47 * 4 + 0, _80.Load(_51 * 4 + 0));
            _80.Store(_51 * 4 + 0, _84);
        }
    }

    [numthreads(256, 1, 1)]
    void main(SPIRV_Cross_Input stage_input)
    {
        gl_GlobalInvocationID = stage_input.gl_GlobalInvocationID;
        comp_main();
    }
*/
static const uint8_t bitonic_sort_source_hlsl5[1404] = {
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,
    0x44,0x61,0x74,0x61,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x53,0x6f,0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,0x61,0x6c,0x75,0x65,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x76,0x61,0x6c,
    0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x75,0x69,0x6e,0x74,0x33,0x20,0x67,0x6c,0x5f,0x57,0x6f,
    0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,0x53,0x69,0x7a,0x65,0x20,0x3d,0x20,0x75,0x69,
    0x6e,0x74,0x33,0x28,0x32,0x35,0x36,0x75,0x2c,0x20,0x31,0x75,0x2c,0x20,0x31,0x75,
    0x29,0x3b,0x0a,0x0a,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x73,0x6f,0x72,0x74,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,
    0x20,0x5f,0x32,0x31,0x5f,0x73,0x74,0x61,0x67,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,
    0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x31,0x5f,0x73,0x74,0x65,0x70,0x20,0x3a,0x20,
    0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x79,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x31,0x5f,0x63,0x6f,
    0x75,0x6e,0x74,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x28,0x63,0x30,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x5f,0x32,0x31,0x5f,0x70,0x61,0x64,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x52,0x57,0x42,0x79,0x74,0x65,0x41,0x64,0x64,0x72,0x65,0x73,0x73,0x42,0x75,0x66,
    0x66,0x65,0x72,0x20,0x5f,0x38,0x30,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x75,0x30,0x29,0x3b,0x0a,0x42,0x79,0x74,0x65,0x41,0x64,0x64,0x72,
    0x65,0x73,0x73,0x42,0x75,0x66,0x66,0x65,0x72,0x20,0x5f,0x39,0x36,0x20,0x3a,0x20,
    0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x75,0x69,0x6e,0x74,0x33,0x20,0x67,0x6c,0x5f,0x47,
    0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,
    0x44,0x3b,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x69,0x6e,0x74,0x33,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,
    0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x20,0x3a,0x20,
    0x53,0x56,0x5f,0x44,0x69,0x73,0x70,0x61,0x74,0x63,0x68,0x54,0x68,0x72,0x65,0x61,
    0x64,0x49,0x44,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x63,0x6f,
    0x6d,0x70,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x69,0x6e,0x74,0x20,0x5f,0x32,0x36,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,
    0x5f,0x32,0x31,0x5f,0x73,0x74,0x65,0x70,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x69,0x6e,0x74,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,0x31,0x75,0x20,0x3c,0x3c,0x20,
    0x5f,0x32,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x34,
    0x37,0x20,0x3d,0x20,0x28,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,
    0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x2f,0x20,
    0x5f,0x32,0x37,0x29,0x20,0x2a,0x20,0x28,0x32,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,
    0x36,0x29,0x29,0x20,0x2b,0x20,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,
    0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x25,
    0x20,0x5f,0x32,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x5f,0x35,0x31,0x20,0x3d,0x20,0x5f,0x34,0x37,0x20,0x2b,0x20,0x5f,0x32,0x37,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x35,0x31,0x20,0x3e,0x3d,0x20,
    0x75,0x69,0x6e,0x74,0x28,0x5f,0x32,0x31,0x5f,0x63,0x6f,0x75,0x6e,0x74,0x29,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x38,0x34,0x20,0x3d,0x20,0x5f,0x38,0x30,0x2e,
    0x4c,0x6f,0x61,0x64,0x28,0x5f,0x34,0x37,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x30,0x37,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x28,0x5f,0x34,0x37,0x20,
    0x2f,0x20,0x28,0x32,0x75,0x20,0x3c,0x3c,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,0x32,
    0x31,0x5f,0x73,0x74,0x61,0x67,0x65,0x29,0x29,0x29,0x20,0x26,0x20,0x31,0x75,0x29,
    0x20,0x3d,0x3d,0x20,0x30,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,0x61,0x73,0x66,
    0x6c,0x6f,0x61,0x74,0x28,0x5f,0x39,0x36,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x5f,0x38,
    0x34,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,0x29,0x29,0x20,0x3c,0x20,0x61,0x73,
    0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x39,0x36,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x5f,
    0x38,0x30,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x5f,0x35,0x31,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x30,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x30,
    0x37,0x20,0x3d,0x20,0x61,0x73,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x39,0x36,0x2e,
    0x4c,0x6f,0x61,0x64,0x28,0x5f,0x38,0x34,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,
    0x29,0x29,0x20,0x3e,0x20,0x61,0x73,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x39,0x36,
    0x2e,0x4c,0x6f,0x61,0x64,0x28,0x5f,0x38,0x30,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x5f,
    0x35,0x31,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,0x29,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x30,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,0x30,0x2e,0x53,0x74,0x6f,
    0x72,0x65,0x28,0x5f,0x34,0x37,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x30,0x2c,0x20,
    0x5f,0x38,0x30,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x5f,0x35,0x31,0x20,0x2a,0x20,0x34,
    0x20,0x2b,0x20,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x5f,0x38,0x30,0x2e,0x53,0x74,0x6f,0x72,0x65,0x28,0x5f,0x35,0x31,0x20,0x2a,0x20,
    0x34,0x20,0x2b,0x20,0x30,0x2c,0x20,0x5f,0x38,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x5b,0x6e,0x75,0x6d,0x74,0x68,0x72,0x65,0x61,0x64,
    0x73,0x28,0x32,0x35,0x36,0x2c,0x20,0x31,0x2c,0x20,0x31,0x29,0x5d,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x49,0x44,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x49,0x44,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6d,0x70,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct sort_params
    {
        int stage;
        int _step;
        int count;
        int _pad;
    };

    struct SortIndexData
    {
        uint value;
    };

    struct index_buffer
    {
        SortIndexData indices[1];
    };

    struct SortDepthValue
    {
        float value;
    };

    struct depth_input
    {
        SortDepthValue depths[1];
    };

    constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(256u, 1u, 1u);

    kernel void main0(constant sort_params& _21 [[buffer(0)]], const device depth_input& _96 [[buffer(8)]], device index_buffer& _80 [[buffer(9)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
    {
        uint _26 = uint(_21._step);
        uint _27 = 1u << _26;
        uint _47 = ((gl_GlobalInvocationID.x / _27) * (2u << _26)) + (gl_GlobalInvocationID.x % _27);
        uint _51 = _47 + _27;
        if (_51 >= uint(_21.count))
        {
            return;
        }
        uint _84 = _80.indices[_47].value;
        bool _107;
        if (((_47 / (2u << uint(_21.stage))) & 1u) == 0u)
        {
            _107 = _96.depths[_84].value < _96.depths[_80.indices[_51].value].value;
        }
        else
        {
            _107 = _96.depths[_84].value > _96.depths[_80.indices[_51].value].value;
        }
        if (_107)
        {
            _80.indices[_47].value = _80.indices[_51].value;
            _80.indices[_51].value = _84;
        }
    }

*/
static const uint8_t bitonic_sort_source_metal_macos[1301] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,
    0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x5f,0x73,0x74,0x65,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x63,0x6f,0x75,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x5f,0x70,0x61,0x64,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x76,0x61,0x6c,0x75,
    0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x69,0x6e,
    0x64,0x65,0x78,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x53,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x20,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,
    0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x69,0x6e,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x53,0x6f,0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,0x61,
    0x6c,0x75,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x75,0x69,0x6e,0x74,
    0x33,0x20,0x67,0x6c,0x5f,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,0x53,0x69,
    0x7a,0x65,0x20,0x5b,0x5b,0x6d,0x61,0x79,0x62,0x65,0x5f,0x75,0x6e,0x75,0x73,0x65,
    0x64,0x5d,0x5d,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x33,0x28,0x32,0x35,0x36,0x75,
    0x2c,0x20,0x31,0x75,0x2c,0x20,0x31,0x75,0x29,0x3b,0x0a,0x0a,0x6b,0x65,0x72,0x6e,
    0x65,0x6c,0x20,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x63,0x6f,
    0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x73,0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x26,0x20,0x5f,0x32,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,
    0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x64,0x65,0x76,
    0x69,0x63,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x69,0x6e,0x70,0x75,0x74,0x26,
    0x20,0x5f,0x39,0x36,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x38,0x29,
    0x5d,0x5d,0x2c,0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,0x69,0x6e,0x64,0x65,0x78,
    0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x26,0x20,0x5f,0x38,0x30,0x20,0x5b,0x5b,0x62,
    0x75,0x66,0x66,0x65,0x72,0x28,0x39,0x29,0x5d,0x5d,0x2c,0x20,0x75,0x69,0x6e,0x74,
    0x33,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x20,0x5b,0x5b,0x74,0x68,0x72,0x65,0x61,0x64,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x69,0x6e,0x5f,0x67,0x72,0x69,
    0x64,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x5f,0x32,0x36,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,0x32,0x31,0x2e,0x5f,
    0x73,0x74,0x65,0x70,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x5f,0x32,0x37,0x20,0x3d,0x20,0x31,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,
    0x28,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x2f,0x20,0x5f,0x32,0x37,0x29,
    0x20,0x2a,0x20,0x28,0x32,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x29,0x29,0x20,
    0x2b,0x20,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x25,0x20,0x5f,0x32,0x37,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x35,0x31,0x20,
    0x3d,0x20,0x5f,0x34,0x37,0x20,0x2b,0x20,0x5f,0x32,0x37,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x35,0x31,0x20,0x3e,0x3d,0x20,0x75,0x69,0x6e,0x74,
    0x28,0x5f,0x32,0x31,0x2e,0x63,0x6f,0x75,0x6e,0x74,0x29,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,
    0x74,0x20,0x5f,0x38,0x34,0x20,0x3d,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,
    0x63,0x65,0x73,0x5b,0x5f,0x34,0x37,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x30,0x37,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x28,0x5f,0x34,0x37,0x20,0x2f,0x20,0x28,
    0x32,0x75,0x20,0x3c,0x3c,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,0x32,0x31,0x2e,0x73,
    0x74,0x61,0x67,0x65,0x29,0x29,0x29,0x20,0x26,0x20,0x31,0x75,0x29,0x20,0x3d,0x3d,
    0x20,0x30,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,
    0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x34,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,
    0x3c,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,
    0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x34,0x5d,0x2e,
    0x76,0x61,0x6c,0x75,0x65,0x20,0x3e,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,
    0x68,0x73,0x5b,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,
    0x35,0x31,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x31,0x30,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,
    0x5f,0x34,0x37,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x20,0x3d,0x20,0x5f,0x38,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct sort_params
    {
        int stage;
        int _step;
        int count;
        int _pad;
    };

    struct SortIndexData
    {
        uint value;
    };

    struct index_buffer
    {
        SortIndexData indices[1];
    };

    struct SortDepthValue
    {
        float value;
    };

    struct depth_input
    {
        SortDepthValue depths[1];
    };

    constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(256u, 1u, 1u);

    kernel void main0(constant sort_params& _21 [[buffer(0)]], const device depth_input& _96 [[buffer(8)]], device index_buffer& _80 [[buffer(9)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
    {
        uint _26 = uint(_21._step);
        uint _27 = 1u << _26;
        uint _47 = ((gl_GlobalInvocationID.x / _27) * (2u << _26)) + (gl_GlobalInvocationID.x % _27);
        uint _51 = _47 + _27;
        if (_51 >= uint(_21.count))
        {
            return;
        }
        uint _84 = _80.indices[_47].value;
        bool _107;
        if (((_47 / (2u << uint(_21.stage))) & 1u) == 0u)
        {
            _107 = _96.depths[_84].value < _96.depths[_80.indices[_51].value].value;
        }
        else
        {
            _107 = _96.depths[_84].value > _96.depths[_80.indices[_51].value].value;
        }
        if (_107)
        {
            _80.indices[_47].value = _80.indices[_51].value;
            _80.indices[_51].value = _84;
        }
    }

*/
static const uint8_t bitonic_sort_source_metal_ios[1301] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,
    0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x5f,0x73,0x74,0x65,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x63,0x6f,0x75,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x5f,0x70,0x61,0x64,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x76,0x61,0x6c,0x75,
    0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x69,0x6e,
    0x64,0x65,0x78,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x53,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x20,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,
    0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x69,0x6e,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x53,0x6f,0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,0x61,
    0x6c,0x75,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x75,0x69,0x6e,0x74,
    0x33,0x20,0x67,0x6c,0x5f,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,0x53,0x69,
    0x7a,0x65,0x20,0x5b,0x5b,0x6d,0x61,0x79,0x62,0x65,0x5f,0x75,0x6e,0x75,0x73,0x65,
    0x64,0x5d,0x5d,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x33,0x28,0x32,0x35,0x36,0x75,
    0x2c,0x20,0x31,0x75,0x2c,0x20,0x31,0x75,0x29,0x3b,0x0a,0x0a,0x6b,0x65,0x72,0x6e,
    0x65,0x6c,0x20,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x63,0x6f,
    0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x73,0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x26,0x20,0x5f,0x32,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,
    0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x64,0x65,0x76,
    0x69,0x63,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x69,0x6e,0x70,0x75,0x74,0x26,
    0x20,0x5f,0x39,0x36,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x38,0x29,
    0x5d,0x5d,0x2c,0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,0x69,0x6e,0x64,0x65,0x78,
    0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x26,0x20,0x5f,0x38,0x30,0x20,0x5b,0x5b,0x62,
    0x75,0x66,0x66,0x65,0x72,0x28,0x39,0x29,0x5d,0x5d,0x2c,0x20,0x75,0x69,0x6e,0x74,
    0x33,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x20,0x5b,0x5b,0x74,0x68,0x72,0x65,0x61,0x64,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x69,0x6e,0x5f,0x67,0x72,0x69,
    0x64,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x5f,0x32,0x36,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,0x32,0x31,0x2e,0x5f,
    0x73,0x74,0x65,0x70,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x5f,0x32,0x37,0x20,0x3d,0x20,0x31,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,
    0x28,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x2f,0x20,0x5f,0x32,0x37,0x29,
    0x20,0x2a,0x20,0x28,0x32,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x29,0x29,0x20,
    0x2b,0x20,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x25,0x20,0x5f,0x32,0x37,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x35,0x31,0x20,
    0x3d,0x20,0x5f,0x34,0x37,0x20,0x2b,0x20,0x5f,0x32,0x37,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x35,0x31,0x20,0x3e,0x3d,0x20,0x75,0x69,0x6e,0x74,
    0x28,0x5f,0x32,0x31,0x2e,0x63,0x6f,0x75,0x6e,0x74,0x29,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,
    0x74,0x20,0x5f,0x38,0x34,0x20,0x3d,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,
    0x63,0x65,0x73,0x5b,0x5f,0x34,0x37,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x30,0x37,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x28,0x5f,0x34,0x37,0x20,0x2f,0x20,0x28,
    0x32,0x75,0x20,0x3c,0x3c,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,0x32,0x31,0x2e,0x73,
    0x74,0x61,0x67,0x65,0x29,0x29,0x29,0x20,0x26,0x20,0x31,0x75,0x29,0x20,0x3d,0x3d,
    0x20,0x30,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,
    0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x34,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,
    0x3c,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,
    0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x34,0x5d,0x2e,
    0x76,0x61,0x6c,0x75,0x65,0x20,0x3e,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,
    0x68,0x73,0x5b,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,
    0x35,0x31,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x31,0x30,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,
    0x5f,0x34,0x37,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x20,0x3d,0x20,0x5f,0x38,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct sort_params
    {
        int stage;
        int _step;
        int count;
        int _pad;
    };

    struct SortIndexData
    {
        uint value;
    };

    struct index_buffer
    {
        SortIndexData indices[1];
    };

    struct SortDepthValue
    {
        float value;
    };

    struct depth_input
    {
        SortDepthValue depths[1];
    };

    constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(256u, 1u, 1u);

    kernel void main0(constant sort_params& _21 [[buffer(0)]], const device depth_input& _96 [[buffer(8)]], device index_buffer& _80 [[buffer(9)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
    {
        uint _26 = uint(_21._step);
        uint _27 = 1u << _26;
        uint _47 = ((gl_GlobalInvocationID.x / _27) * (2u << _26)) + (gl_GlobalInvocationID.x % _27);
        uint _51 = _47 + _27;
        if (_51 >= uint(_21.count))
        {
            return;
        }
        uint _84 = _80.indices[_47].value;
        bool _107;
        if (((_47 / (2u << uint(_21.stage))) & 1u) == 0u)
        {
            _107 = _96.depths[_84].value < _96.depths[_80.indices[_51].value].value;
        }
        else
        {
            _107 = _96.depths[_84].value > _96.depths[_80.indices[_51].value].value;
        }
        if (_107)
        {
            _80.indices[_47].value = _80.indices[_51].value;
            _80.indices[_51].value = _84;
        }
    }

*/
static const uint8_t bitonic_sort_source_metal_sim[1301] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,
    0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x5f,0x73,0x74,0x65,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x63,0x6f,0x75,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x5f,0x70,0x61,0x64,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x76,0x61,0x6c,0x75,
    0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x69,0x6e,
    0x64,0x65,0x78,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x53,0x6f,0x72,0x74,0x49,0x6e,0x64,0x65,0x78,0x44,0x61,0x74,0x61,0x20,0x69,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x6f,0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,
    0x61,0x6c,0x75,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x69,0x6e,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x53,0x6f,0x72,0x74,0x44,0x65,0x70,0x74,0x68,0x56,0x61,
    0x6c,0x75,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x75,0x69,0x6e,0x74,
    0x33,0x20,0x67,0x6c,0x5f,0x57,0x6f,0x72,0x6b,0x47,0x72,0x6f,0x75,0x70,0x53,0x69,
    0x7a,0x65,0x20,0x5b,0x5b,0x6d,0x61,0x79,0x62,0x65,0x5f,0x75,0x6e,0x75,0x73,0x65,
    0x64,0x5d,0x5d,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x33,0x28,0x32,0x35,0x36,0x75,
    0x2c,0x20,0x31,0x75,0x2c,0x20,0x31,0x75,0x29,0x3b,0x0a,0x0a,0x6b,0x65,0x72,0x6e,
    0x65,0x6c,0x20,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x63,0x6f,
    0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x73,0x6f,0x72,0x74,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x26,0x20,0x5f,0x32,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,
    0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x64,0x65,0x76,
    0x69,0x63,0x65,0x20,0x64,0x65,0x70,0x74,0x68,0x5f,0x69,0x6e,0x70,0x75,0x74,0x26,
    0x20,0x5f,0x39,0x36,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x38,0x29,
    0x5d,0x5d,0x2c,0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,0x69,0x6e,0x64,0x65,0x78,
    0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x26,0x20,0x5f,0x38,0x30,0x20,0x5b,0x5b,0x62,
    0x75,0x66,0x66,0x65,0x72,0x28,0x39,0x29,0x5d,0x5d,0x2c,0x20,0x75,0x69,0x6e,0x74,
    0x33,0x20,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x20,0x5b,0x5b,0x74,0x68,0x72,0x65,0x61,0x64,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5f,0x69,0x6e,0x5f,0x67,0x72,0x69,
    0x64,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x5f,0x32,0x36,0x20,0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,0x32,0x31,0x2e,0x5f,
    0x73,0x74,0x65,0x70,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x5f,0x32,0x37,0x20,0x3d,0x20,0x31,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,
    0x28,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x2f,0x20,0x5f,0x32,0x37,0x29,
    0x20,0x2a,0x20,0x28,0x32,0x75,0x20,0x3c,0x3c,0x20,0x5f,0x32,0x36,0x29,0x29,0x20,
    0x2b,0x20,0x28,0x67,0x6c,0x5f,0x47,0x6c,0x6f,0x62,0x61,0x6c,0x49,0x6e,0x76,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x49,0x44,0x2e,0x78,0x20,0x25,0x20,0x5f,0x32,0x37,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x35,0x31,0x20,
    0x3d,0x20,0x5f,0x34,0x37,0x20,0x2b,0x20,0x5f,0x32,0x37,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x35,0x31,0x20,0x3e,0x3d,0x20,0x75,0x69,0x6e,0x74,
    0x28,0x5f,0x32,0x31,0x2e,0x63,0x6f,0x75,0x6e,0x74,0x29,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,
    0x74,0x20,0x5f,0x38,0x34,0x20,0x3d,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,
    0x63,0x65,0x73,0x5b,0x5f,0x34,0x37,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x30,0x37,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x28,0x5f,0x34,0x37,0x20,0x2f,0x20,0x28,
    0x32,0x75,0x20,0x3c,0x3c,0x20,0x75,0x69,0x6e,0x74,0x28,0x5f,0x32,0x31,0x2e,0x73,
    0x74,0x61,0x67,0x65,0x29,0x29,0x29,0x20,0x26,0x20,0x31,0x75,0x29,0x20,0x3d,0x3d,
    0x20,0x30,0x75,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,
    0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x34,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,
    0x3c,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x30,0x37,0x20,0x3d,0x20,
    0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,0x68,0x73,0x5b,0x5f,0x38,0x34,0x5d,0x2e,
    0x76,0x61,0x6c,0x75,0x65,0x20,0x3e,0x20,0x5f,0x39,0x36,0x2e,0x64,0x65,0x70,0x74,
    0x68,0x73,0x5b,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,
    0x35,0x31,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x31,0x30,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x38,0x30,0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,
    0x5f,0x34,0x37,0x5d,0x2e,0x76,0x61,0x6c,0x75,0x65,0x20,0x3d,0x20,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x38,0x30,
    0x2e,0x69,0x6e,0x64,0x69,0x63,0x65,0x73,0x5b,0x5f,0x35,0x31,0x5d,0x2e,0x76,0x61,
    0x6c,0x75,0x65,0x20,0x3d,0x20,0x5f,0x38,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* sort_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)bitonic_sort_source_glsl410;
            desc.compute_func.entry = "main";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_INT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "sort_params";
            desc.views[0].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[0].storage_buffer.readonly = true;
            desc.views[0].storage_buffer.glsl_binding_n = 0;
            desc.views[1].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].storage_buffer.readonly = false;
            desc.views[1].storage_buffer.glsl_binding_n = 1;
            desc.label = "sort_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)bitonic_sort_source_glsl310es;
            desc.compute_func.entry = "main";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_INT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "sort_params";
            desc.views[0].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[0].storage_buffer.readonly = true;
            desc.views[0].storage_buffer.glsl_binding_n = 0;
            desc.views[1].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].storage_buffer.readonly = false;
            desc.views[1].storage_buffer.glsl_binding_n = 1;
            desc.label = "sort_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)bitonic_sort_source_hlsl5;
            desc.compute_func.d3d11_target = "cs_5_0";
            desc.compute_func.entry = "main";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.views[0].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[0].storage_buffer.readonly = true;
            desc.views[0].storage_buffer.hlsl_register_t_n = 0;
            desc.views[1].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].storage_buffer.readonly = false;
            desc.views[1].storage_buffer.hlsl_register_u_n = 0;
            desc.label = "sort_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)bitonic_sort_source_metal_macos;
            desc.compute_func.entry = "main0";
            desc.mtl_threads_per_threadgroup.x = 256;
            desc.mtl_threads_per_threadgroup.y = 1;
            desc.mtl_threads_per_threadgroup.z = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.views[0].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[0].storage_buffer.readonly = true;
            desc.views[0].storage_buffer.msl_buffer_n = 8;
            desc.views[1].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].storage_buffer.readonly = false;
            desc.views[1].storage_buffer.msl_buffer_n = 9;
            desc.label = "sort_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_IOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)bitonic_sort_source_metal_ios;
            desc.compute_func.entry = "main0";
            desc.mtl_threads_per_threadgroup.x = 256;
            desc.mtl_threads_per_threadgroup.y = 1;
            desc.mtl_threads_per_threadgroup.z = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.views[0].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[0].storage_buffer.readonly = true;
            desc.views[0].storage_buffer.msl_buffer_n = 8;
            desc.views[1].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].storage_buffer.readonly = false;
            desc.views[1].storage_buffer.msl_buffer_n = 9;
            desc.label = "sort_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_SIMULATOR) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.compute_func.source = (const char*)bitonic_sort_source_metal_sim;
            desc.compute_func.entry = "main0";
            desc.mtl_threads_per_threadgroup.x = 256;
            desc.mtl_threads_per_threadgroup.y = 1;
            desc.mtl_threads_per_threadgroup.z = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_COMPUTE;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.views[0].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[0].storage_buffer.readonly = true;
            desc.views[0].storage_buffer.msl_buffer_n = 8;
            desc.views[1].storage_buffer.stage = SG_SHADERSTAGE_COMPUTE;
            desc.views[1].storage_buffer.readonly = false;
            desc.views[1].storage_buffer.msl_buffer_n = 9;
            desc.label = "sort_shader";
        }
        return &desc;
    }
    return 0;
}
